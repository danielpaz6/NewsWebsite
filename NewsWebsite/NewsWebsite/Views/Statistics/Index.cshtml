@using NewsWebsite.Extensions
@{
    ViewBag.Title = "Statistics";
    int count = 1, count2 = 1;
    int max = ViewBag.CategoryAndCountMax;
}

@if (!Request.IsAuthenticated)
{
    <span>Sorry, you must login in order to access this page.</span>
}
else
{
    if (User.Identity.GetPermission() == 0)
    {
        <span>Sorry, you don't have access to reach this page.</span>
    }
    else
    {
        <script src="https://d3js.org/d3.v4.js"></script>
        <div class="text-center">
            <h2>Watch some statistics..</h2>
            <hr>
        </div>

        <div class="row">
            <div class="col-lg-4 col-sm-6 col-xs-12">
                <article class="card card-outline mb-4">
                    <div class="card-body">
                        <header>
                            <h2 class="card-title fixed-font">@ViewBag.CountArticles</h2>
                            <h6 class="card-subtitle mb-2 text-muted">Articles</h6>
                        </header>
                        <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>

                        <svg width="300" height="80">
                            @foreach (var item in ViewBag.Articles)
                            {
                                <rect x="0" y="@(count*25 - 25)" height="20" width="245" style="fill: #52b3ff; opacity: 0.65;"></rect>
                                @:<text x="5" y="@(count*25 - 25 + 13)" font-family="Verdana" font-size="10" fill="black">@item.Key</text>
                                @:<text x="250" y="@(count*25 - 25 + 13)" font-family="Verdana" font-size="10" fill="black">@item.Value</text>


                                count++;
                            }
                        </svg>
                    </div>
                </article><!-- /.card -->
            </div>

            <div class="col-lg-4 col-sm-6 col-xs-12">
                <article class="card card-outline mb-4">
                    <div class="card-body">
                        <header>
                            <h2 class="card-title fixed-font">@ViewBag.CountCategories</h2>
                            <h6 class="card-subtitle mb-2 text-muted">Categories</h6>
                        </header>
                        <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                        <svg width="300" height="@(ViewBag.CountCategories * 25)">
                            @foreach (var v in ViewBag.CatMap)
                            {
                                <rect x="0" y="@(count2*25 - 25)" height="20" width="@(245 * v.Value/max)" style="fill: #ff0000; opacity: 0.65;"></rect>
                                @:<text x="5" y="@(count2*25 - 25 + 13)" font-family="Verdana" font-size="10" fill="black">@v.Key</text>
                                @:<text x="250" y="@(count2*25 - 25 + 13)" font-family="Verdana" font-size="10" fill="black">@v.Value</text>


                                count2++;
                            }
                        </svg>
                    </div>
                </article><!-- /.card -->
            </div>

            <div class="col-lg-4 col-sm-6 col-xs-12">
                <article class="card card-outline mb-4">
                    <div class="card-body">
                        <header>
                            <h2 class="card-title fixed-font">@ViewBag.CountUsers</h2>
                            <h6 class="card-subtitle mb-2 text-muted">Application Users</h6>
                        </header>
                        <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                        <a href="#" class="card-link">Another link</a>
                    </div>
                </article><!-- /.card -->
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="card">
                    <div class="card-body">
                        <div id="my_dataviz"></div>


                        <style>
                            /* set the CSS */

                            .axis {
                                font: 14px sans-serif;
                            }

                            .line {
                                fill: none;
                                stroke: steelblue;
                                stroke-width: 2px;
                            }
                        </style>

                            <!-- load the d3.js library -->
                            <script src="https://d3js.org/d3.v4.min.js"></script>
                            <script>

                                // set the dimensions and margins of the graph
                                var margin = { top: 20, right: 20, bottom: 70, left: 50 },
                                    width = 960 - margin.left - margin.right,
                                    height = 500 - margin.top - margin.bottom;

                                // parse the date / time
                                var parseTime = d3.timeParse("%d-%b-%y");

                                // set the ranges
                                var x = d3.scaleTime().range([0, width]);
                                var y = d3.scaleLinear().range([height, 0]);

                                // define the line
                                var valueline = d3.line()
                                    .x(function (d) { return x(d.date); })
                                    .y(function (d) { return y(d.close); });

                                // append the svg obgect to the body of the page
                                // appends a 'group' element to 'svg'
                                // moves the 'group' element to the top left margin
                                var svg = d3.select("#my_dataviz").append("svg")
                                    .attr("width", width + margin.left + margin.right)
                                    .attr("height", height + margin.top + margin.bottom)
                                    .append("g")
                                    .attr("transform",
                                        "translate(" + margin.left + "," + margin.top + ")");

                                // Get the data
                                d3.csv("/Statistics/GetGraph1", function (error, data) {
                                    if (error) throw error;

                                    // format the data
                                    data.forEach(function (d) {
                                        d.date = parseTime(d.date);
                                        d.close = +d.close;
                                    });

                                    // Scale the range of the data
                                    x.domain(d3.extent(data, function (d) { return d.date; }));
                                    y.domain([0, d3.max(data, function (d) { return d.close; })]);

                                    // Add the valueline path.
                                    svg.append("path")
                                        .data([data])
                                        .attr("class", "line")
                                        .attr("d", valueline);

                                    // Add the X Axis
                                    svg.append("g")
                                        .attr("class", "axis")
                                        .attr("transform", "translate(0," + height + ")")
                                        .call(d3.axisBottom(x).ticks(10))
                                        .selectAll("text")
                                        .style("text-anchor", "end")
                                        .attr("dx", "-.8em")
                                        .attr("dy", ".15em")
                                        .attr("transform", "rotate(-65)");

                                    // Add the Y Axis
                                    svg.append("g")
                                        .attr("class", "axis")
                                        .call(d3.axisLeft(y));

                                });

                            </script>

                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="card">
                    <div>
                        <svg id="svg_panel" width="280" height="280"></svg>
                        <div id="svg_panel_txt"></div>
                    </div>
                    <script type="text/javascript">
                        // svg_id - id of target svg
                        // data - array of objects {label, value}
                        function drawPieChartSVG(svg_id, data) {
                            var svg = document.getElementById(svg_id);
                            var width = svg.width.baseVal.value,
                                height = svg.height.baseVal.value,
                                radius = Math.min(width, height) / 2;
                            var colors = d3.scaleOrdinal(d3.schemeCategory10);
                            var arc = d3.arc()
                                .outerRadius(radius - 10)
                                .innerRadius(0)
                                .padAngle(0.03);

                            var pie = d3.pie().value(function (d) { return d.value; });
                            var root = d3.select("#" + svg_id)
                                .datum(data)
                                .attr("width", width)
                                .attr("height", height)
                                .append("g")
                                .attr("transform",
                                    "translate(" + width / 2.0 + "," + height / 2.0 + ")");

                            var arcs = root
                                .selectAll("g.slice")
                                .data(pie)
                                .enter()
                                .append("g")
                                .attr("class", "slice");

                            arcs
                                .append("path")
                                .attr("fill", function (d, i) { return colors(i); })
                                .attr("d", arc)

                                // show details in the separate html element when mouse is over the specified sector
                                .on("mouseover", function (d, i) {
                                    var txt = document.getElementById(svg_id + "_txt");
                                    if (txt) {
                                        txt.innerHTML = d.data.label + " (" + d.data.value + ")";
                                    }
                                });

                            // place labels on the chart
                            arcs.append("svg:text")
                                .attr("transform", function (d) {
                                    d.innerRadius = radius / 2.0;
                                    d.outerRadius = radius;
                                    // text will be inserted in the center of the current section

                                    return "translate(" + arc.centroid(d) + ")";
                                })
                                .attr("text-anchor", "middle")

                                // d.data - our data item, assigned to the current section. "label" is a part of our data object
                                .text(function (d, i) { return d.data.label; });
                        }
                        //data for the pie chart
                        var pie_chart_data = [];

                        //draw the pie chart
                        function updateChart() {
                            drawPieChartSVG("svg_panel", pie_chart_data);
                        }

                        Sys.Application.add_load(updateChart);
                    </script>
                </div>
            </div>
        </div>
    }
}
