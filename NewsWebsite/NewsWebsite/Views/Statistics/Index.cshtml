@using NewsWebsite.Extensions
@{
    ViewBag.Title = "Statistics";
    int count = 1, count2 = 1;
    int max = !Request.IsAuthenticated ? 0 : ViewBag.CategoryAndCountMax;
}

@if (!Request.IsAuthenticated)
{
    <span>Sorry, you must login in order to access this page.</span>
}
else
{
    if (User.Identity.GetPermission() == 0)
    {
        <span>Sorry, you don't have access to reach this page.</span>
    }
    else
    {
        <script src="https://d3js.org/d3.v4.js"></script>
        <div class="text-center">
            <h2>Watch some statistics..</h2>
            <hr>
        </div>

        <div class="row">
            <div class="col-lg-4 col-sm-6 col-xs-12">
                <article class="card card-outline mb-4">
                    <div class="card-body">
                        <header>
                            <h2 class="card-title fixed-font">@ViewBag.CountArticles</h2>
                            <h6 class="card-subtitle mb-2 text-muted">Articles</h6>
                        </header>
                        <p class="card-text">Some quick data of the top 3 most watched articles in the website. (Title and amount)</p>

                        <svg width="300" height="80">
                            @foreach (var item in ViewBag.Articles)
                            {
                                <rect x="0" y="@(count*25 - 25)" height="20" width="245" style="fill: #52b3ff; opacity: 0.65;"></rect>
                                @:<text x="5" y="@(count*25 - 25 + 13)" font-family="Verdana" font-size="10" fill="black">@item.Key</text>
                                @:<text x="250" y="@(count*25 - 25 + 13)" font-family="Verdana" font-size="10" fill="black">@item.Value</text>


                                count++;
                            }
                        </svg>
                    </div>
                </article><!-- /.card -->
            </div>

            <div class="col-lg-4 col-sm-6 col-xs-12">
                <article class="card card-outline mb-4">
                    <div class="card-body">
                        <header>
                            <h2 class="card-title fixed-font">@ViewBag.CountCategories</h2>
                            <h6 class="card-subtitle mb-2 text-muted">Categories</h6>
                        </header>
                        <p class="card-text">Here you can see the various categories, splitted by their name and amount of articles.</p>
                        <svg width="300" height="@(ViewBag.CountCategories * 25)">
                            @foreach (var v in ViewBag.CatMap)
                            {
                                <rect x="0" y="@(count2*25 - 25)" height="20" width="@(245 * v.Value/max)" style="fill: #ff0000; opacity: 0.65;"></rect>
                                @:<text x="5" y="@(count2*25 - 25 + 13)" font-family="Verdana" font-size="10" fill="black">@v.Key</text>
                                @:<text x="250" y="@(count2*25 - 25 + 13)" font-family="Verdana" font-size="10" fill="black">@v.Value</text>


                                count2++;
                            }
                        </svg>
                    </div>
                </article><!-- /.card -->
            </div>

            <div class="col-lg-4 col-sm-6 col-xs-12">
                <article class="card card-outline mb-4">
                    <div class="card-body">
                        <header>
                            <h2 class="card-title fixed-font">@ViewBag.CountUsers</h2>
                            <h6 class="card-subtitle mb-2 text-muted">Application Users</h6>
                        </header>
                        <p class="card-text">The increasement of new users in the website.</p>
                        <canvas id="myCanvas" width="250" height="100">
                            Your browser does not support the HTML5 canvas tag.
                        </canvas>

                        <script>
                            var c = document.getElementById("myCanvas");
                            var ctx = c.getContext("2d");
                            ctx.moveTo(0, 20);
                            ctx.lineTo(220, 100);
                            ctx.stroke();
                        </script>
                    </div>
                </article><!-- /.card -->
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="card">
                    <div class="card-body">
                        <!-- Load d3.js -->
                        <script src="https://d3js.org/d3.v4.js"></script>
                        This graph shows how many articles were added to the site each day.

                        <!-- Create a div where the graph will take place -->
                        <div id="my_dataviz" style="margin-left: -10px; margin-top: 10px;"></div>

                        <script>
                            function draw1() {
                                // set the dimensions and margins of the graph
                                var margin = { top: 10, right: 30, bottom: 30, left: 30 },
                                    width = 410 - margin.left - margin.right,
                                    height = 380 - margin.top - margin.bottom;
                                // append the svg object to the body of the page
                                var svg = d3.select("#my_dataviz")
                                    .append("svg")
                                    .attr("width", width + margin.left + margin.right)
                                    .attr("height", height + margin.top + margin.bottom)
                                    .append("g")
                                    .attr("transform",
                                        "translate(" + margin.left + "," + margin.top + ")");
                                //Read the data
                                
                                d3.csv("/Statistics/GetGraph1",
                                    // When reading the csv, I must format variables:
                                    function (d) {
                                        return { date: d3.timeParse("%Y-%m-%d")(d.date), value: d.value }
                                    },
                                    // Now I can use this dataset:
                                    function (data) {
                                        // Add X axis --> it is a date format
                                        var x = d3.scaleTime()
                                            .domain(d3.extent(data, function (d) { return d.date; }))
                                            .range([0, width]);
                                        svg.append("g")
                                            .attr("transform", "translate(0," + height + ")")
                                            .call(d3.axisBottom(x));
                                        // Add Y axis
                                        var y = d3.scaleLinear()
                                            .domain([0, 100])
                                            .range([height, 0]);
                                        svg.append("g")
                                            .call(d3.axisLeft(y));
                                        // Add the line
                                        svg.append("path")
                                            .datum(data)
                                            .attr("fill", "none")
                                            .attr("stroke", "#69b3a2")
                                            .attr("stroke-width", 1.5)
                                            .attr("d", d3.line()
                                                .x(function (d) { return x(d.date) })
                                                .y(function (d) { return y(d.value) })
                                            )
                                        // Add the points
                                        svg
                                            .append("g")
                                            .selectAll("dot")
                                            .data(data)
                                            .enter()
                                            .append("circle")
                                            .attr("cx", function (d) { return x(d.date) })
                                            .attr("cy", function (d) { return y(d.value) })
                                            .attr("r", 5)
                                            .attr("fill", "#69b3a2")
                                    })
                            }
                            setTimeout(draw1, 1200);
                        </script>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="card">
                    <div class="card-body">
                        This graph shows the ratio of the different categories.

                        <!-- Create a div where the graph will take place -->
                        <div id="graph2" style="margin-top: -20px; margin-top: 10px;"></div>

                        <!-- Color scale -->
                        <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
                        <script>
                            function draw2() {
                                // set the dimensions and margins of the graph
                                var width = 400
                                height = 400
                                margin = 20

                                // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
                                var radius = Math.min(width, height) / 2 - margin

                                // append the svg object to the div called 'graph2'
                                var svg = d3.select("#graph2")
                                    .append("svg")
                                    .attr("width", width)
                                    .attr("height", height)
                                    .append("g")
                                    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                                // Create dummy data
                                var data = {
                                    @foreach (var item in ViewBag.CatMap)
                                    {
                                        @Html.Raw(item.Key + ": " + item.Value + ",");
                                    }
                                }

                                // set the color scale
                                var color = d3.scaleOrdinal()
                                    .domain(data)
                                    .range(d3.schemeSet2);

                                // Compute the position of each group on the pie:
                                var pie = d3.pie()
                                    .value(function (d) { return d.value; })
                                var data_ready = pie(d3.entries(data))
                                // Now I know that group A goes from 0 degrees to x degrees and so on.

                                // shape helper to build arcs:
                                var arcGenerator = d3.arc()
                                    .innerRadius(0)
                                    .outerRadius(radius)

                                // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
                                svg
                                    .selectAll('mySlices')
                                    .data(data_ready)
                                    .enter()
                                    .append('path')
                                    .attr('d', arcGenerator)
                                    .attr('fill', function (d) { return (color(d.data.key)) })
                                    .attr("stroke", "black")
                                    .style("stroke-width", "2px")
                                    .style("opacity", 0.7)

                                // Now add the annotation. Use the centroid method to get the best coordinates
                                svg
                                    .selectAll('mySlices')
                                    .data(data_ready)
                                    .enter()
                                    .append('text')
                                    .text(function (d) { return d.data.key })
                                    .attr("transform", function (d) { return "translate(" + arcGenerator.centroid(d) + ")"; })
                                    .style("text-anchor", "middle")
                                    .style("font-size", 14)
                            }

                            setTimeout(draw2, 1200);
                        </script>
                    </div>
                </div>
            </div>
        </div>
    }
}
